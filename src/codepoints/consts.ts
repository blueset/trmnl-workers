export const GCB_LABELS = {
    'CN': 'Control',
    'CR': 'Carriage Return',
    'EX': 'Extend',
    'L': 'Hangul Syllable Type L',
    'LF': 'Line Feed',
    'LV': 'Hangul Syllable Type LV',
    'LVT': 'Hangul Syllable Type LVT',
    'PP': 'Prepend',
    'RI': 'Regional Indicator',
    'SM': 'Spacing Mark',
    'T': 'Hangul Syllable Type T',
    'V': 'Hangul Syllable Type V',
    'XX': 'Any',
    'ZWJ': 'Zero Width Joiner',
} as const;

export const SB_LABELS = {
    'AT': 'Alphabetic Terminal',
    'CL': 'Close',
    'CR': 'Carriage Return',
    'EX': 'Extend',
    'FO': 'Format',
    'LE': 'Other Letter',
    'LF': 'Line Feed',
    'LO': 'Lower',
    'NU': 'Numeric',
    'SC': 'Sentence Continue',
    'SE': 'Separator',
    'SP': 'Space',
    'ST': 'Sentence Terminal',
    'UP': 'Upper',
    'XX': 'Other',
} as const;

export const WB_LABELS = {
    'CR': 'Carriage Return',
    'DQ': 'Double Quote',
    'EX': 'ExtendNumLet',
    'Extend': 'Extend',
    'FO': 'Format',
    'HL': 'Hebrew Letter',
    'KA': 'Katakana',
    'LE': 'Alphabetic Letter',
    'LF': 'Line Feed',
    'MB': 'MidNumLet',
    'ML': 'MidLetter',
    'MN': 'MidNum',
    'NL': 'Newline',
    'NU': 'Numeric',
    'RI': 'Regional Indicator',
    'SQ': 'Single Quote',
    'WSegSpace': 'WSegSpace',
    'XX': 'Other',
    'ZWJ': 'Zero Width Joiner',
} as const;

export const BC_LABELS = {
    'AL': 'Arabic Letter',
    'AN': 'Arabic Number',
    'B': 'Paragraph Separator',
    'BN': 'Boundary Neutral',
    'CS': 'Common Separator',
    'EN': 'European Number',
    'ES': 'European Separator',
    'ET': 'European Terminator',
    'FSI': 'First Strong Isolate',
    'L': 'Left To Right',
    'LRE': 'Left To Right Embedding',
    'LRI': 'Left To Right Isolate',
    'LRO': 'Left To Right Override',
    'NSM': 'Nonspacing Mark',
    'ON': 'Other Neutral',
    'PDF': 'Pop Directional Format',
    'PDI': 'Pop Directional Isolate',
    'R': 'Right To Left',
    'RLE': 'Right To Left Embedding',
    'RLI': 'Right To Left Isolate',
    'RLO': 'Right To Left Override',
    'S': 'Segment Separator',
    'WS': 'White Space',
} as const;

export const BPT_LABELS = {
    'o': 'Open',
    'c': 'Close',
    'n': 'None',
} as const;

export const DT_LABELS = {
    'can': 'canonical',
    'com': 'compatibility',
    'enc': 'circle',
    'fin': 'final',
    'font': 'font',
    'fra': 'fraction',
    'init': 'initial',
    'iso': 'isolated',
    'med': 'medial',
    'nar': 'narrow',
    'nb': 'non-breaking',
    'none': 'none',
    'sml': 'small',
    'sqr': 'square',
    'sub': 'subscript',
    'sup': 'superscript',
    'vert': 'vertical',
    'wide': 'wide',
} as const;

export const EA_LABELS = {
    'A': 'ambiguous',
    'F': 'fullwidth',
    'H': 'halfwidth',
    'N': 'neutral',
    'Na': 'narrow',
    'W': 'wide',
} as const;

export const GC_LABELS = {
    'Lu': 'Uppercase Letter',
    'Ll': 'Lowercase Letter',
    'Lt': 'Titlecase Letter',
    'Lm': 'Modifier Letter',
    'Lo': 'Other Letter',
    'Mn': 'Nonspacing Mark',
    'Mc': 'Spacing Mark',
    'Me': 'Enclosing Mark',
    'Nd': 'Decimal Number',
    'Nl': 'Letter Number',
    'No': 'Other Number',
    'Pc': 'Connector Punctuation',
    'Pd': 'Dash Punctuation',
    'Ps': 'Open Punctuation',
    'Pe': 'Close Punctuation',
    'Pi': 'Initial Punctuation',
    'Pf': 'Final Punctuation',
    'Po': 'Other Punctuation',
    'Sm': 'Math Symbol',
    'Sc': 'Currency Symbol',
    'Sk': 'Modifier Symbol',
    'So': 'Other Symbol',
    'Zs': 'Space Separator',
    'Zl': 'Line Separator',
    'Zp': 'Paragraph Separator',
    'Cc': 'Control',
    'Cf': 'Format',
    'Cs': 'Surrogate',
    'Co': 'Private Use',
    'Cn': 'Unassigned',
} as const;

export const HST_LABELS = {
    'L': 'Leading Jamo',
    'LV': 'LV Syllable',
    'LVT': 'LVT Syllable',
    'NA': 'Not Applicable',
    'T': 'Trailing Jamo',
    'V': 'Vowel Jamo',
} as const;

export const JT_LABELS = {
    'C': 'Join Causing',
    'D': 'Dual Joining',
    'L': 'Left Joining',
    'R': 'Right Joining',
    'T': 'Transparent',
    'U': 'Non Joining',
} as const;

export const NT_LABELS = {
    'De': 'decimal',
    'Di': 'digit',
    'None': 'none',
    'Nu': 'numeric',
} as const;

export const LB_LABELS = {
    'AI': 'Ambiguous (Alphabetic or Ideographic)',
    'AL': 'Alphabetic',
    'B2': 'Break Opportunity Before and After',
    'BA': 'Break After',
    'BB': 'Break Before',
    'BK': 'Mandatory Break',
    'CB': 'Contingent Break Opportunity',
    'CJ': 'Conditional Japanese Starter',
    'CL': 'Close Punctuation',
    'CM': 'Combining Mark',
    'CP': 'Close Parenthesis',
    'CR': 'Carriage Return',
    'EB': 'Emoji Base',
    'EM': 'Emoji Modifier',
    'EX': 'Exclamation/Interrogation',
    'GL': 'Non-breaking ("Glue")',
    'H2': 'Hangul LV Syllable',
    'H3': 'Hangul LVT Syllable',
    'HL': 'Hebrew Letter',
    'HY': 'Hyphen',
    'ID': 'Ideographic',
    'IN': 'Inseparable',
    'IS': 'Infix Numeric Separator',
    'JL': 'Hangul L Jamo',
    'JT': 'Hangul T Jamo',
    'JV': 'Hangul V Jamo',
    'LF': 'Line Feed',
    'NL': 'Next Line',
    'NS': 'Nonstarter',
    'NU': 'Numeric',
    'OP': 'Open Punctuation',
    'PO': 'Postfix Numeric',
    'PR': 'Prefix Numeric',
    'QU': 'Quotation',
    'RI': 'Regional Indicator',
    'SA': 'Complex Context Dependent (South East Asian)',
    'SG': 'Surrogate',
    'SP': 'Space',
    'SY': 'Symbols Allowing Break After',
    'WJ': 'Word Joiner',
    'XX': 'Unknown',
    'ZWJ': 'Zero Width Joiner',
    'ZW': 'Zero Width Space',
} as const;

export const LB_DESCRIPTIONS = {
    'AI': 'Act like AL when the resolved EAW is N; otherwise, act as ID',
    'AL': 'Are alphabetic characters or symbols that are used with alphabetic characters',
    'B2': 'Provide a line break opportunity before and after the character',
    'BA': 'Generally provide a line break opportunity after the character',
    'BB': 'Generally provide a line break opportunity before the character',
    'BK': 'Cause a line break (after)',
    'CB': 'Provide a line break opportunity contingent on additional information',
    'CJ': 'Treat as NS or ID for strict or normal breaking.',
    'CL': 'Prohibit line breaks before',
    'CM': 'Prohibit a line break between the character and the preceding character',
    'CP': 'Prohibit line breaks before',
    'CR': 'Cause a line break (after), except between CR and LF',
    'EB': 'Do not break from following Emoji Modifier',
    'EM': 'Do not break from preceding Emoji Base',
    'EX': 'Prohibit line breaks before',
    'GL': 'Prohibit line breaks before and after',
    'H2': 'Form Korean syllable blocks',
    'H3': 'Form Korean syllable blocks',
    'HL': 'Do not break around a following hyphen; otherwise act as Alphabetic',
    'HY': 'Provide a line break opportunity after the character, except in numeric context',
    'ID': 'Break before or after, except in some numeric context',
    'IN': 'Allow only indirect line breaks between pairs',
    'IS': 'Prevent breaks after any and before numeric',
    'JL': 'Form Korean syllable blocks',
    'JT': 'Form Korean syllable blocks',
    'JV': 'Form Korean syllable blocks',
    'LF': 'Cause a line break (after)',
    'NL': 'Cause a line break (after)',
    'NS': 'Allow only indirect line breaks before',
    'NU': 'Form numeric expressions for line breaking purposes',
    'OP': 'Prohibit line breaks after',
    'PO': 'Do not break following a numeric expression',
    'PR': 'Do not break in front of a numeric expression',
    'QU': 'Act like they are both opening and closing',
    'RI': 'Keep pairs together. For pairs, break before and after other classes',
    'SA': 'Provide a line break opportunity contingent on additional, language-specific context analysis',
    'SG': 'Do not occur in well-formed text',
    'SP': 'Enable indirect line breaks',
    'SY': 'Prevent a break before, and allow a break after',
    'WJ': 'Prohibit line breaks before and after',
    'XX': 'Have as yet unknown line breaking behavior or unassigned code positions',
    'ZWJ': 'Prohibit line breaks within joiner sequences',
    'ZW': 'Provide a break opportunity',
} as const;

// Base CCC labels for specific values
export const CCC_LABELS_BASE = {
    '0': 'Not Reordered',
    '1': 'Overlay',
    '6': 'Han Reading',
    '7': 'Nukta',
    '8': 'Kana Voicing',
    '9': 'Virama',
    '200': 'Attached Below Left',
    '202': 'Attached Below',
    '204': 'Attached Above Left',
    '208': 'Attached Above',
    '210': 'Attached Above Right',
    '212': 'Attached Right',
    '214': 'Attached Above',
    '216': 'Attached Above Right',
    '218': 'Below Left',
    '220': 'Below',
    '222': 'Below Right',
    '224': 'Left',
    '226': 'Right',
    '228': 'Above Left',
    '230': 'Above',
    '232': 'Above Right',
    '233': 'Double Below',
    '234': 'Double Above',
    '240': 'Iota Subscript',
} as const;

export const CCC_DESCRIPTIONS_BASE = {
    '0': 'Spacing and enclosing marks; also many vowel and consonant signs, even if nonspacing',
    '1': 'Marks which overlay a base letter or symbol',
    '6': 'Diacritic reading marks for CJK unified ideographs',
    '7': 'Diacritic nukta marks in Brahmi-derived scripts',
    '8': 'Hiragana/Katakana voicing marks',
    '9': 'Viramas',
    '200': 'Marks attached at the bottom left',
    '202': 'Marks attached directly below',
    '204': 'Marks attached at the top right',
    '208': 'Marks attached to the left',
    '210': 'Marks attached to the right',
    '212': 'Marks attached at the top left',
    '214': 'Marks attached directly above',
    '216': 'Marks attached at the top right',
    '218': 'Distinct marks at the bottom left',
    '220': 'Distinct marks directly below',
    '222': 'Distinct marks at the bottom right',
    '224': 'Distinct marks to the left',
    '226': 'Distinct marks to the right',
    '228': 'Distinct marks at the top left',
    '230': 'Distinct marks directly above',
    '232': 'Distinct marks at the top right',
    '233': 'Distinct marks subtending two bases',
    '234': 'Distinct marks extending above two bases',
    '240': 'Greek iota subscript only',
} as const;

// Generate CCC labels for values 10-199 (Fixed Position Classes)
export const CCC_LABELS: Record<string, string> = {
    ...CCC_LABELS_BASE,
};

export const CCC_DESCRIPTIONS: Record<string, string> = {
    ...CCC_DESCRIPTIONS_BASE,
};

// Generate labels for CCC values 10-199
for (let i = 10; i <= 199; i++) {
    const key = i.toString();
    CCC_LABELS[key] = `Ccc${i}`;
    CCC_DESCRIPTIONS[key] = `Fixed Position Class ${i}`;
}

export const SCRIPT_LABELS = {
    'Adlm': 'Adlam',
    'Afak': 'Afaka',
    'Aghb': 'Caucasian Albanian',
    'Ahom': 'Ahom',
    'Arab': 'Arabic',
    'Aran': 'Arabic (Nastaliq variant)',
    'Armi': 'Imperial Aramaic',
    'Armn': 'Armenian',
    'Avst': 'Avestan',
    'Bali': 'Balinese',
    'Bamu': 'Bamum',
    'Bass': 'Bassa Vah',
    'Batk': 'Batak',
    'Beng': 'Bengali',
    'Bhks': 'Bhaiksuki',
    'Bopo': 'Bopomofo',
    'Brah': 'Brahmi',
    'Brai': 'Braille',
    'Bugi': 'Buginese',
    'Buhd': 'Buhid',
    'Cakm': 'Chakma',
    'Cans': 'Canadian Aboriginal',
    'Cari': 'Carian',
    'Cham': 'Cham',
    'Cher': 'Cherokee',
    'Chrs': 'Chorasmian',
    'Copt': 'Coptic',
    'Cpmn': 'Cypro-Minoan',
    'Cprt': 'Cypriot syllabary',
    'Cyrl': 'Cyrillic',
    'Diak': 'Dives Akuru',
    'Deva': 'Devanagari',
    'Dogr': 'Dogra',
    'Dsrt': 'Deseret',
    'Dupl': 'Duployan shorthand',
    'Egyp': 'Egyptian Hieroglyphs',
    'Elba': 'Elbasan',
    'Elym': 'Elymaic',
    'Ethi': 'Ethiopic',
    'Gara': 'Garay',
    'Geok': 'Khutsuri',
    'Geor': 'Georgian',
    'Glag': 'Glagolitic',
    'Gong': 'Gunjala Gondi',
    'Gonm': 'Masaram Gondi',
    'Goth': 'Gothic',
    'Gran': 'Grantha',
    'Grek': 'Greek',
    'Gujr': 'Gujarati',
    'Gukh': 'Gurung Khema',
    'Guru': 'Gurmukhi',
    'Hanb': 'Han with Bopomofo',
    'Hang': 'Hangul',
    'Hani': 'Han',
    'Hano': 'Hanunoo',
    'Hans': 'Han (Simplified variant)',
    'Hant': 'Han (Traditional variant)',
    'Hatr': 'Hatran',
    'Hebr': 'Hebrew',
    'Hira': 'Hiragana',
    'Hluw': 'Anatolian Hieroglyphs',
    'Hmng': 'Pahawh Hmong',
    'Hmnp': 'Nyiakeng Puachue Hmong',
    'Hrkt': 'Katakana or Hiragana',
    'Hung': 'Old Hungarian',
    'Ital': 'Old Italic',
    'Jamo': 'Jamo',
    'Java': 'Javanese',
    'Jpan': 'Japanese',
    'Jurc': 'Jurchen',
    'Kali': 'Kayah Li',
    'Kana': 'Katakana',
    'Kawi': 'Kawi',
    'Khar': 'Kharoshthi',
    'Khmr': 'Khmer',
    'Khoj': 'Khojki',
    'Kitl': 'Khitan large script',
    'Kits': 'Khitan small script',
    'Knda': 'Kannada',
    'Kore': 'Korean',
    'Kpel': 'Kpelle',
    'Krai': 'Kirat Rai',
    'Kthi': 'Kaithi',
    'Lana': 'Tai Tham',
    'Laoo': 'Lao',
    'Latn': 'Latin',
    'Leke': 'Leke',
    'Lepc': 'Lepcha',
    'Limb': 'Limbu',
    'Lina': 'Linear A',
    'Linb': 'Linear B',
    'Lisu': 'Lisu',
    'Loma': 'Loma',
    'Lyci': 'Lycian',
    'Lydi': 'Lydian',
    'Mahj': 'Mahajani',
    'Maka': 'Makasar',
    'Mand': 'Mandaic',
    'Mani': 'Manichaean',
    'Marc': 'Marchen',
    'Medf': 'Medefaidrin',
    'Mend': 'Mende',
    'Merc': 'Meroitic Cursive',
    'Mero': 'Meroitic Hieroglyphs',
    'Mlym': 'Malayalam',
    'Modi': 'Modi',
    'Mong': 'Mongolian',
    'Moon': 'Moon',
    'Mroo': 'Mro, Mru',
    'Mtei': 'Meitei Mayek',
    'Mult': 'Multani',
    'Mymr': 'Myanmar',
    'Nagm': 'Nag Mundari',
    'Nand': 'Nandinagari',
    'Narb': 'Old North Arabian',
    'Nbat': 'Nabataean',
    'Newa': 'Newa',
    'Nkdb': 'Naxi Dongba',
    'Nkgb': 'Naxi Geba',
    'Nkoo': 'N\'Ko',
    'Nshu': 'Nüshu',
    'Ogam': 'Ogham',
    'Olck': 'Ol Chiki',
    'Onao': 'Ol Onal',
    'Orkh': 'Old Turkic',
    'Orya': 'Oriya',
    'Osge': 'Osage',
    'Osma': 'Osmanya',
    'Ougr': 'Old Uyghur',
    'Palm': 'Palmyrene',
    'Pauc': 'Pau Cin Hau',
    'Pcun': 'Proto-Cuneiform',
    'Pelm': 'Proto-Elamite',
    'Perm': 'Old Permic',
    'Phag': 'Phags Pa',
    'Phli': 'Inscriptional Pahlavi',
    'Phlp': 'Psalter Pahlavi',
    'Phlv': 'Book Pahlavi',
    'Phnx': 'Phoenician',
    'Piqd': 'Klingon',
    'Plrd': 'Miao',
    'Prti': 'Inscriptional Parthian',
    'Psin': 'Proto-Sinaitic',
    'Qaaa': 'Reserved for private use (start)',
    'Qabx': 'Reserved for private use (end)',
    'Ranj': 'Ranjana',
    'Rjng': 'Rejang',
    'Rohg': 'Hanifi Rohingya',
    'Runr': 'Runic',
    'Samr': 'Samaritan',
    'Sara': 'Sarati',
    'Sarb': 'Old South Arabian',
    'Saur': 'Saurashtra',
    'Sgnw': 'Sutton SignWriting',
    'Shaw': 'Shavian',
    'Shrd': 'Sharada',
    'Shui': 'Shuishu',
    'Sidd': 'Siddham',
    'Sind': 'Sindhi',
    'Sinh': 'Sinhala',
    'Sogd': 'Sogdian',
    'Sogo': 'Old Sogdian',
    'Sora': 'Sora Sompeng',
    'Soyo': 'Soyombo',
    'Sund': 'Sundanese',
    'Sylo': 'Syloti Nagri',
    'Syrc': 'Syriac',
    'Tagb': 'Tagbanwa',
    'Takr': 'Takri',
    'Tale': 'Tai Le',
    'Talu': 'New Tai Lue',
    'Tang': 'Tangut',
    'Taml': 'Tamil',
    'Tavt': 'Tai Viet',
    'Telu': 'Telugu',
    'Tfng': 'Tifinagh',
    'Tglg': 'Tagalog',
    'Thaa': 'Thaana',
    'Thai': 'Thai',
    'Tibt': 'Tibetan',
    'Tirh': 'Tirhuta',
    'Tnsa': 'Tangsa',
    'Todr': 'Todrhi',
    'Toto': 'Toto',
    'Tutg': 'Tulu-Tigalari',
    'Ugar': 'Ugaritic',
    'Vaii': 'Vai',
    'Vith': 'Vithkuqi',
    'Wara': 'Warang Citi',
    'Wcho': 'Wancho',
    'Wole': 'Woleai',
    'Xpeo': 'Old Persian',
    'Xsux': 'Cuneiform',
    'Yezi': 'Yezidi',
    'Yiii': 'Yi',
    'Zanb': 'Zanabazar Square',
    'Zinh': 'Inherited',
    'Zmth': 'Mathematical notation',
    'Zsye': 'Symbols (Emoji variant)',
    'Zsym': 'Symbols',
    'Zxxx': 'Unwritten',
    'Zyyy': 'Common',
    'Zzzz': 'Unknown',
} as const;
